'''
函数
    实现一个特定功能的代码段
    def 函数名():
        代码
    函数不调用不执行，在函数定义后调用
    调用方法    函数名()
    函数的参数:
        位置参数：定义函数时，定义了形参
            调用函数时，必须传实参
            实参的位置和形参的位置一一对应
        关键字参数:在调用函数时，以键值对的方式传参
            指定给那个形参传递参数
        默认值传参:自定义函数时，给形参指定默认值
             调用时如果不传参数，函数使用默认值
             如果传了实参，形参的默认值会覆盖
        非关键字收集参数:定义函数时，使用*args作为形参
              调用函数时，实参的传递，先检测有没有位置参数
              如果有位置参数，先按照位置顺序传给位置参数
              如果传了多余的参数，多余的实参就会被*args用元组收集起来
'''
#位置传参
def func1(num1,num2):  # 形参
    print("我是num1",num1,"我是num2",num2)
    print("我是func，我执行了")
#func1(10,12)
# 关键字传参
def func2(num1, num2):  # 形参
    print("我是num1", num1)
    print("我是num2", num2)
#func2(num2=10,num1=30)
#默认值传参
# 自定义函数时，给形参指定默认值
# 调用时如果不传参数，函数使用默认值
# 如果传了实参，形参的默认值会覆盖
def func3(num1=110,num2=10):
    print("我是num1",num1)
    print("我是num2",num2)
#func3(10,20)
# 非关键字收集参数:定义函数时，使用*args作为形参

def func4(*args):
    print(args)
# 关键字收集参数,用元组收集多余的关键字参数，将收集来的参数组成字典
def func5(**kwargs):
    print(kwargs)
func5(name='hek',age=10)
#顺序问题
# 定义函数时
#           位置参数，非关键字收集参数，关键字参数，关键字收集参数
# 调用函数时
#           位置参数，关键字参数
def func6(num1,num2,*args,**kwargs):
    print(num1,num2)
    print(args)
    print(kwargs)
func6(10,30,20,num=90)